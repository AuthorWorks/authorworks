version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: authorworks
      POSTGRES_PASSWORD: ${DB_PASSWORD:-authorworks123}
      POSTGRES_DB: authorworks
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authorworks"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: authorworks
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-authorworks123}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  # Object Storage (MinIO as S3 replacement for local dev)
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-authorworks}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-authorworks123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  # Core Services
  user-service:
    build: ./authorworks-user-service
    environment:
      DATABASE_URL: postgresql://authorworks:${DB_PASSWORD:-authorworks123}@postgres:5432/authorworks
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key}
      SERVICE_PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  content-service:
    build: ./authorworks-content-service
    environment:
      DATABASE_URL: postgresql://authorworks:${DB_PASSWORD:-authorworks123}@postgres:5432/authorworks
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://authorworks:${RABBITMQ_PASSWORD:-authorworks123}@rabbitmq:5672
      STORAGE_SERVICE_URL: http://storage-service:3003
      SERVICE_PORT: 3002
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  storage-service:
    build: ./authorworks-storage-service
    environment:
      DATABASE_URL: postgresql://authorworks:${DB_PASSWORD:-authorworks123}@postgres:5432/authorworks
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-authorworks}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-authorworks123}
      SERVICE_PORT: 3003
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  editor-service:
    build: ./authorworks-editor-service
    environment:
      DATABASE_URL: postgresql://authorworks:${DB_PASSWORD:-authorworks123}@postgres:5432/authorworks
      REDIS_URL: redis://redis:6379
      CONTENT_SERVICE_URL: http://content-service:3002
      SERVICE_PORT: 3004
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      content-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  subscription-service:
    build: ./authorworks-subscription-service
    environment:
      DATABASE_URL: postgresql://authorworks:${DB_PASSWORD:-authorworks123}@postgres:5432/authorworks
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_placeholder}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-whsec_placeholder}
      SERVICE_PORT: 3005
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  messaging-service:
    build: ./authorworks-messaging-service
    environment:
      RABBITMQ_URL: amqp://authorworks:${RABBITMQ_PASSWORD:-authorworks123}@rabbitmq:5672
      REDIS_URL: redis://redis:6379
      SERVICE_PORT: 3006
    ports:
      - "3006:3006"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  discovery-service:
    build: ./authorworks-discovery-service
    environment:
      DATABASE_URL: postgresql://authorworks:${DB_PASSWORD:-authorworks123}@postgres:5432/authorworks
      ELASTICSEARCH_URL: http://elasticsearch:9200
      SERVICE_PORT: 3007
    ports:
      - "3007:3007"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  # Media Services
  audio-service:
    build: ./authorworks-audio-service
    environment:
      DATABASE_URL: postgresql://authorworks:${DB_PASSWORD:-authorworks123}@postgres:5432/authorworks
      STORAGE_SERVICE_URL: http://storage-service:3003
      SERVICE_PORT: 3008
    ports:
      - "3008:3008"
    depends_on:
      postgres:
        condition: service_healthy
      storage-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  video-service:
    build: ./authorworks-video-service
    environment:
      DATABASE_URL: postgresql://authorworks:${DB_PASSWORD:-authorworks123}@postgres:5432/authorworks
      STORAGE_SERVICE_URL: http://storage-service:3003
      SERVICE_PORT: 3009
    ports:
      - "3009:3009"
    depends_on:
      postgres:
        condition: service_healthy
      storage-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  graphics-service:
    build: ./authorworks-graphics-service
    environment:
      DATABASE_URL: postgresql://authorworks:${DB_PASSWORD:-authorworks123}@postgres:5432/authorworks
      STORAGE_SERVICE_URL: http://storage-service:3003
      SERVICE_PORT: 3010
    ports:
      - "3010:3010"
    depends_on:
      postgres:
        condition: service_healthy
      storage-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  # Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  # API Gateway (using Nginx for simplicity, can be replaced with Kong/Traefik)
  api-gateway:
    image: nginx:alpine
    ports:
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - user-service
      - content-service
      - storage-service
      - editor-service
      - subscription-service
      - messaging-service
      - discovery-service
      - audio-service
      - video-service
      - graphics-service
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - authorworks

  # UI Shell (Dioxus Web)
  ui-shell:
    build: ./authorworks-ui-shell
    environment:
      API_GATEWAY_URL: http://api-gateway:8080
    ports:
      - "3000:3000"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - authorworks

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  elasticsearch_data:

networks:
  authorworks:
    driver: bridge